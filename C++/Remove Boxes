class Solution {
public:
    vector<vector<vector<int>>> dp;

    // Recursive function with memoization
    int removeBoxesUtil(vector<int>& boxes, int l, int r, int k) {
        if (l > r) return 0;
        if (dp[l][r][k] != -1) return dp[l][r][k];

        // Max score by removing boxes[l] to boxes[r]
        int result = (k + 1) * (k + 1) + removeBoxesUtil(boxes, l + 1, r, 0);

        // Try merging non-contiguous same color boxes
        for (int i = l + 1; i <= r; ++i) {
            if (boxes[i] == boxes[l]) {
                result = max(result, removeBoxesUtil(boxes, l + 1, i - 1, 0) + removeBoxesUtil(boxes, i, r, k + 1));
            }
        }
        return dp[l][r][k] = result;
    }

    int removeBoxes(vector<int>& boxes) {
        int n = boxes.size();
        dp = vector<vector<vector<int>>>(n, vector<vector<int>>(n, vector<int>(n, -1)));
        return removeBoxesUtil(boxes, 0, n - 1, 0);
    }
};
